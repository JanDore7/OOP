__dict__ - показывает все атрибуты класса, но не показывает атрибуты экземпляра класса если они не были созданы.
Экземпляры класса при создании не содержат своих собственных атрибутов они ссылаются на атрибуты класса.
	
isinstance(a, Point) - это проверка того, является ли объект a экземпляром класса Point или его подкласса. Это используется в Python для определения принадлежности объекта к определенному классу или его подклассам.


setattr(Класс или атрибут класса, название атрибута, значение) добавляет атрибут классу или экземпляру класса или изменяет его значение если он уже существует.


getattr(Point, 'a', False) проверяет есть ли такой атрибут и возвращает его значение, если атрибут не существует возвращает в данном случае False, но может и любое другое указанное значение


hasattr(Point, 'atribut') Возвращает булевое значение, в случае если атрибут существует вернет True если нет False. Важно функция через пространство имен атрибута класса может обратиться к пространству имен самого класса. Т.е сам экземпляр класса может не иметь своего атрибута, иными словами a.__dict__ не будт содержать запрашиваемый атрибут, но функция все равно вернет True поскольку атрибут есть в Point.__dict__


delattr(Point, 'atribut') если атрибут отсутсвует упадет в ошибку если есть удалит его. Удаление происходит непосредственно в текущем пространстве имен.


class Point:
    color = 'red'
    circle = 2

    def set_coords(self):
        print(f'Вызов метода set_coords = {self=}')
        
#self = это ссылка на экземпляр класса иными словами в нашем премере сейчас
self = pt

pt = Point()
pt.set_coords() - сработает
Point.set_coords() - не сработает, потому что ждет аргумент  в виде экземпляра класса, т.е self.


Имена методов в классах - это тоже атрибуты


















